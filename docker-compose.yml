version: '3.8'

services:
  web:
    build:
      context: ./views/project
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./views/project/src:/app/src
      - ./views/project/public:/app/public
      - ./views/project/yarn.lock:/app/yarn.lock
      - ./views/project/package.json:/app/package.json
      - /app/node_modules
    stdin_open: true
    tty: true
    networks:
      - my-network

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api_container
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: ${POSTGRES_PORT}
      API_HOST: ${API_HOST}
      API_PORT: ${API_PORT}
    ports:
      - "${API_PORT}:${API_PORT}"
    depends_on:
      - postgres
    restart: always
    networks:
      - my-network

  postgres:
    image: postgres:15
    container_name: postgres_container
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    networks:
      - my-network

  nginx:
    image: nginx:alpine
    container_name: nginx_container
    ports:
      - "80:80"
    depends_on:
      - web
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    restart: always
    networks:
      - my-network

volumes:
  postgres_data:

networks:
  my-network:
    driver: bridge
